// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// main.go
package assets // had to change the package name from default to prevent packag errors

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x92\x4f\x6f\xdb\x30\x0c\xc5\xcf\x16\xa0\xef\xc0\x19\x08\x6a\x63\x5e\x7c\x1f\x90\xe3\x32\xf4\x32\x6c\xbd\x76\x3b\xb0\x31\x9d\x08\x93\xa8\x94\xa2\x3a\x03\x43\xbe\xfb\x20\x39\x4b\xdb\x8b\xf5\x87\x7a\xbf\x27\x3e\xf9\x8c\x87\xdf\x78\x24\x08\xe8\xd8\x1a\x6b\x5c\x38\x47\x51\xe8\xac\x69\xda\x39\x68\x5b\xc6\x80\x7a\x1a\x05\x79\xaa\xab\x98\xea\x90\x54\x1c\x1f\xcb\xbc\x2f\xba\x71\x04\x21\x9c\x40\x4f\x04\xb3\xf3\x04\x7f\x9c\x9e\x00\xbd\x5f\x77\xa2\x68\x66\x4a\xd6\xcc\x99\x0f\xf5\xe4\xde\x79\xea\xce\xa8\x27\x58\x49\x3d\x3c\xfe\x5a\x67\xf0\xd7\x9a\x66\x1c\xe1\x05\x05\x84\x52\xf6\x9a\x6e\x35\x6b\x9a\x42\x1f\x80\x44\xe0\xf3\x0e\x62\xda\x3e\xbc\x85\xf5\xd6\x34\x6e\xae\xd5\x0f\x3b\x60\xe7\x2b\xac\x11\xd2\x2c\x5c\xd6\xd6\x34\x97\x72\xdf\x06\xbd\xff\x91\xa3\x52\x2a\x98\x15\xde\x15\x74\x21\xac\xae\xaf\x85\xb4\xdd\x3b\xf2\x53\xda\x67\x3e\x74\x37\xe1\x00\xa5\x99\x4e\x40\x32\x53\x0f\x4f\x31\xbe\x77\x13\xd8\xed\xe0\x6e\x73\x57\x2c\x0b\x75\x0e\xba\xfd\x2e\x8e\x75\xee\xda\xcd\x73\x3b\x5c\x9b\x5b\x0d\x57\x45\xdd\xb0\xe6\x72\x4d\xf4\x01\x79\x8a\x01\xbe\xe5\xf0\x44\x02\x5f\x89\x49\x50\xa3\xc0\x63\x70\x3c\x04\x5c\xfa\xff\x79\xd6\x73\xf7\xac\x5d\x29\x40\xc0\x05\x1c\x6b\x5f\x3e\xf5\x46\x57\x7c\x70\x0c\x1f\xeb\xe1\xed\x3d\x2b\x77\x01\x97\x4f\xc1\x71\x7f\x35\xac\xa8\xf2\x1f\x74\x7d\x55\x3d\xdf\xe2\xb9\xbd\x57\x3b\xa1\xe2\x78\x46\xc1\x29\x2e\x39\x6c\x75\xd1\xb6\xb6\x16\x05\x1c\x4f\xb4\x0c\xf0\x82\x3e\x53\x15\x21\x1f\x09\xae\x90\x9a\xcb\xdb\x00\xbe\x78\x0a\xc4\x0a\xa8\xb0\x99\xc0\x25\xd8\xa4\x9f\xdc\x0e\xef\x28\xfd\xfa\x58\x17\x6b\xfe\x05\x00\x00\xff\xff\x71\xc4\xb2\xfc\xa6\x02\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 678, mode: os.FileMode(438), modTime: time.Unix(1732097710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"main.go": mainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"main.go": {mainGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
